import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import time
import xgboost as xgb

# Učitavanje dataset-a
file_path = "../data/mhealth.csv"
data = pd.read_csv(file_path, header=0, low_memory=False)

# Dodavanje naziva kolona
columns = ['alx', 'aly', 'alz', 'glx', 'gly', 'glz',
           'arx', 'ary', 'arz', 'grx', 'gry', 'grz',
           'Activity', 'subject']
data.columns = columns

# Provera dataset-a nakon učitavanja
print("Prvih 5 redova dataset-a nakon učitavanja:")
print(data.head())
print("Jedinstvene vrednosti u koloni 'Activity' pre obrade:", data['Activity'].unique())

# Konverzija numeričkih kolona
for col in data.columns[:-2]:  # Sve osim 'Activity' i 'subject'
    data[col] = pd.to_numeric(data[col], errors='coerce')
data['Activity'] = pd.to_numeric(data['Activity'], errors='coerce')

# Provera broja NaN vrednosti
print("\nBroj NaN vrednosti po kolonama:")
print(data.isna().sum())

# Uklanjanje redova sa NaN vrednostima
data.dropna(inplace=True)

# Provera validnosti podataka
print("\nDataset nakon uklanjanja NaN vrednosti:")
print(data.head())
print("Jedinstvene vrednosti u koloni 'Activity' nakon uklanjanja NaN vrednosti:", data['Activity'].unique())

# Provera validnosti vrednosti u 'Activity'
valid_activities = set(range(0, 12))
invalid_values = set(data['Activity'].unique()) - valid_activities
if invalid_values:
    print(f"Pronađene nevalidne vrednosti u 'Activity': {invalid_values}")
    data = data[data['Activity'].isin(valid_activities)]

# Provera praznog dataset-a
if data.empty:
    raise ValueError("Dataset je prazan nakon filtriranja validnih klasa aktivnosti.")

# Provera finalnog dataset-a
print("\nDataset nakon filtriranja validnih klasa aktivnosti:")
print(data.head())
print("Jedinstvene vrednosti u koloni 'Activity':", data['Activity'].unique())

# Priprema podataka
X = data.drop(['Activity', 'subject'], axis=1).values
y = data['Activity'].values

# Skaliranje podataka
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Enkodiranje ciljne promenljive
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)


# Podela na trening i test skup
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Kreiranje i treniranje XGBoost modela
model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', tree_method='hist', n_jobs=-1)

start_time = time.time()
model.fit(X_train, y_train)
end_time = time.time()

# Predikcije
y_pred = model.predict(X_test)

# Nazivi aktivnosti
activity_labels = [
    "Stajanje u mestu",
    "Sedenje i opuštanje",
    "Ležanje",
    "Hodanje",
    "Penjanje uz stepenice",
    "Savijanje struka unapred",
    "Podizanje ruku napred",
    "Savijanje kolena (čučnjevi)",
    "Vožnja bicikla",
    "Lagano trčanje",
    "Trčanje",
    "Skakanje napred i nazad"
]

# Evaluacija modela
print(f"Tačnost modela: {model.score(X_test, y_test):.4f}")
print(f"Vreme izvršavanja: {end_time - start_time:.2f} sekundi")

print("\nIzveštaj o klasifikaciji:")
print(classification_report(y_test, y_pred, target_names=activity_labels))

# Konfuziona matrica
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(12, 10))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=activity_labels, yticklabels=activity_labels)
plt.xlabel('Predikcija')
plt.ylabel('Prava klasa')
plt.title('Konfuziona matrica za XGBoost algoritam')
plt.show()
